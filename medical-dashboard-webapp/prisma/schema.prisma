datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  PATIENT
  DOCTOR
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  role  Role    @default(DOCTOR)
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model hospital {
  id_organization      String @unique
  id_location          String
  status               String
  name                 String
  telecom              String
  address_line         String
  city                 String
  state                String
  postalCode           String
  country              String
  longitude            Float
  latitude             Float
}

model practitioner {
  identifier String @unique
  name String
  email String
  adress String
  city String
  state String
  postalCode String
  country String
  gender String
  role String
  id_organization String
}

model patient {
  identifier String @unique
  surname String
  familyName String
  gender String
  birthDate String
  telecom String
  adress String
  city String
  state String
  postalCode String
  country String
  maritalStatus String
}

model visit {
  identifier String @unique
  id_organization String
  id_practitioner String
  id_patient String
  status String
  startTime String
  endTime String
  type String
}

model hospital_stats {
  hospital_id String @unique
  visit_count BigInt
  patient_count BigInt
  most_common_disease String
  disease_count BigInt
}

model practitioner_stats {
  id_practitioner String @unique
  average_age Float
  min_age Int
  max_age Int
  total_patients BigInt
}